"""
Title: AS-IBDne
Description: Custom pipeline to infer ancestry-specific historical effective population sizes using IBDne
Authors: Mira Mastoras, Austin Reynolds
"""

import os

# -------
# SET-UP
# -------

DATASET = config['dataset']
GENMAP = config['rfmix_genmap'] # The genetic map file should contain the map for the entire genome (all chromosomes).
GMAP = config['chr_gmap'] # path to genetic map files for each chromosome
SMPMAP = config['smpmap']
ADMIX = config['admix_samples']
REF=config['ref'] # path to reference haps/sample/legend files, including prefix.
NANC=config['nanc']
CHR = [i for i in range(1,23)]

# ---------
#  Targets
# ---------

rule all:
  input:
    expand("results/RFmix/{dataset}.chr{chrnum}.msp.tsv", dataset = DATASET, chrnum = CHR),
    expand("results/RFmix/{dataset}.chr{chrnum}.fb.tsv", dataset = DATASET, chrnum = CHR),
    expand("results/IBD-segs/{dataset}.chr{chrnum}.phased.filled.allanc.ibd",dataset = DATASET, chrnum = CHR )

# ---------
#  Phasing
# ---------

rule break_chrom:
  input:
    multiext("data/{dataset}", ".bed", ".bim", ".fam")
  output:
    multiext("results/phasing/{dataset}.chr{chrnum}", ".bed", ".bim", ".fam")
  params:
    "results/phasing/{dataset}.chr{chrnum}"
  shell:
    """
    plink --bfile data/{wildcards.dataset} --chr {wildcards.chrnum} --make-bed --out {params}
    """

rule phase:
  input:
    multiext("results/phasing/{dataset}.chr{chrnum}", ".bed", ".bim", ".fam")
  output:
    multiext("results/phasing/{dataset}.chr{chrnum}.phased", ".haps", ".sample"),
    "shapeit_log/{dataset}_chr{chrnum}.phased.log"
  params:
    inputmap = GMAP+"chr{chrnum}.gmap.txt",
    in_pre="results/phasing/{dataset}.chr{chrnum}",
    out_pre="results/phasing/{dataset}.chr{chrnum}.phased",
    log_pre="shapeit_log/{dataset}_chr{chrnum}.phased"
  threads: 10
  shell:
    """
    shapeit -B {params.in_pre} -M {params.inputmap} --input-ref {REF}_chr{wildcards.chrnum}.hap.gz {REF}_chr{wildcards.chrnum}.legend.gz {REF}.sample --duohmm -W 5 -O {params.out_pre} --output-log {params.log_pre} -T {threads}
    """

# ----------
# Run RFmix
# ----------

rule make_vcf:
  input:
    multiext("results/phasing/{dataset}.chr{chrnum}.phased", ".haps", ".sample")
  output:
    vcf = "results/phasing/{dataset}.chr{chrnum}.phased.vcf"
  params:
    in_pre="results/phasing/{dataset}.chr{chrnum}.phased",
  shell:
    """
    shapeit -convert --input-haps {params.in_pre} --output-vcf {output.vcf}
    """

rule split_vcf:
  input:
    "results/phasing/{dataset}.chr{chrnum}.phased.vcf"
  output:
    ref = "results/phasing/{dataset}.chr{chrnum}.phased.ref.vcf",
    admix = "results/phasing/{dataset}.chr{chrnum}.phased.admix.vcf"
  shell:
    """
    bgzip -c {input} > {input}.gz
    tabix -p vcf {input}.gz
    bcftools view -S {ADMIX} {input}.gz > {output.admix}
    bcftools view -S ^{ADMIX} {input}.gz > {output.ref}
    """

rule run_rfmix:
  input:
    ref = "results/phasing/{dataset}.chr{chrnum}.phased.ref.vcf",
    admix = "results/phasing/{dataset}.chr{chrnum}.phased.admix.vcf"
  output:
    "results/RFmix/{dataset}.chr{chrnum}.msp.tsv",
    "results/RFmix/{dataset}.chr{chrnum}.fb.tsv"
  params:
    "results/RFmix/{dataset}.chr{chrnum}"
  shell:
    """
    rfmix -f {input.admix} -r {input.ref} -m {SMPMAP} -g {GENMAP} -o {params} --chromosome={wildcards.chrnum}
    """

# ----------
# Get IBD
# ----------

rule convert_germline:
  input:
    multiext("results/phasing/{dataset}.chr{chrnum}.phased", ".haps", ".sample")
  output:
    multiext("results/phasing/{dataset}.chr{chrnum}.phased", ".ped", ".map")
  params:
    prefix = "results/phasing/{dataset}.chr{chrnum}.phased",
    map = GMAP+"chr{chrnum}.gmap.txt"
  shell:
    """
    python scripts/shapeit_to_germline.py {params.prefix} {params.map}
    """

rule refined_ibd:
  input:
    vcf = "results/phasing/{dataset}.chr{chrnum}.phased.vcf",
    map = "results/phasing/{dataset}.chr{chrnum}.phased.map"
  output:
    multiext("results/IBD-segs/{dataset}.chr{chrnum}.phased", ".log", ".hbd.gz", ".ibd.gz")
  params:
    "results/IBD-segs/{dataset}.chr{chrnum}.phased"
  threads: 10
  shell:
    """
    java -jar progs/refined-ibd.17Jan20.102.jar gt={input.vcf} map={input.map} out={params} nthreads={threads}
    """

rule fill_gaps:
  input:
    ibd = "results/IBD-segs/{dataset}.chr{chrnum}.phased.ibd.gz",
    vcf = "results/phasing/{dataset}.chr{chrnum}.phased.vcf",
    map = "results/phasing/{dataset}.chr{chrnum}.phased.map"
  output:
    "results/IBD-segs/{dataset}.chr{chrnum}.phased.filled.ibd"
  shell:
    """
    gunzip -c {input.ibd} | java -jar progs/merge-ibd-segments.16May19.ad5.jar {input.vcf} {input.map} 0.6 1 > {output}
    """

# ------------------------
# Add Ancestry from RFMIX
# ------------------------

rule convert_msp:
  input:
    msp = "results/RFmix/{dataset}.chr{chrnum}.msp.tsv",
    bim = "results/phasing/{dataset}.chr{chrnum}.bim"
  output:
    "results/RFmix/{dataset}.chr{chrnum}.vit.tsv"
  shell:
    """
    grep '#' {input.msp} | tail -n 1 | cut -f7- | tr '\\t' '\\n' | cut -f1 -d'.' | tr '\\n' '\\t' | sed 's/^/POS /' > results/RFmix/vit_header
    python scripts/msp_to_vit.py {input.msp} {input.bim} {output} results/RFmix/vit_header
    cat results/RFmix/new_vit_header {output} > newvit ; mv newvit {output}
    cut -f4 {input.bim} > results/RFmix/bim_positions ; paste -d' ' results/RFmix/bim_positions {output} > newfile ; mv newfile output
    """

rule add_ancestry:
  input:
    ibd = "results/IBD-segs/{dataset}.chr{chrnum}.phased.ibd.gz",
    filled_ibd = "results/IBD-segs/{dataset}.chr{chrnum}.phased.filled.ibd",
    vit = "results/RFmix/{dataset}.chr{chrnum}.vit.tsv"
  output:
    "results/IBD-segs/{dataset}.chr{chrnum}.phased.filled.allanc.ibd"
  shell:
    """
    python scripts/filter_gapfilled_ibd_ancestry.py {input.ibd} {input.filled_ibd} {input.vit} {NANC} > {output}
    """


python scripts/filter_gapfilled_ibd_ancestry.py results/IBD-segs/americans_subset_remove.chr21.phased.ibd.gz results/IBD-segs/americans_subset_remove.chr21.phased.filled.ibd results/RFmix/chr21_new_vit.tsv.nodots 3 > fillancestryibdtest


    python scripts/rephasevit.py results/phasing/ref_bal_CDB_merge_geno0.05.chr7.phased.vcf data/admix.samples.keep results/RFMIX/ref_bal_CDB_merge_geno0.05.chr7.rfmix.allelesRephased0.txt  results/RFMIX/ref_bal_CDB_merge_geno0.05.chr7.rfmix.0.Viterbi.txt > Viterbi_refinedibdphase

rule combine_ibd:
  shell:
    """
    cat results/chrom[1-9]_anc${anc}.gapfilled_ibd results/chrom[1-3][0-9]_anc${anc}.gapfilled_ibd > results/anc${anc}.gapfilled_ibd
    """

rule calc_haps:
  shell:
    """
    cat results/chrom[1-9]_rfmix_Viterbi_refinedibdphase results/chrom[1-3][0-9]_rfmix_Viterbi_refinedibdphase | java -jar filtercolumns.jar 1 results/admids | python adjust_npairs.py $anc > results/anc${anc}_npairs
    """



shapeit -B results/phasing/1kg_recombine_qc_nodups.chr1 -M /share/hennlab/reference/recombination_maps/genetic_map_HapMapII_GRCh37/chr1.gmap.txt --input-ref /share/hennlab/reference/1000G_Phase3_haps-sample-legend/1000GP_Phase3/1000GP_Phase3_chr1.hap.gz /share/hennlab/reference/1000G_Phase3_haps-sample-legend/1000GP_Phase3/1000GP_Phase3_chr1.legend.gz /share/hennlab/reference/1000G_Phase3_haps-sample-legend/1000GP_Phase3/1000GP_Phase3.sample --duohmm -W 5 -O shapeit_test --output-log shapeit_log -T 10

# --------
#  IBDne
# --------


rule ibdne:
  shell:
    """
    cm=2
for anc in 1 2 3; do
  cat results/anc${anc}.gapfilled_ibd | java -jar ibdne.05May18.1c3.jar map=data/constrecomb.map nthreads=12 mincm=$cm npairs=`cat results/anc${anc}_npairs` filtersamples=false out=results/anc${anc}_${cm}cM.ibdne
done
    """
